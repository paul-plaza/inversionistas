// <auto-generated />

#nullable disable

using Investors.Repository.EF.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Investors.Client.Api.Infrastructure.Migrations
{
    [DbContext(typeof(InvestorsDbContext))]
    [Migration("20230517235549_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("CatalogDetailSequence");

            modelBuilder.HasSequence<int>("CatalogSequence");

            modelBuilder.HasSequence<int>("CategorySequence");

            modelBuilder.HasSequence<int>("EventDetailSequence");

            modelBuilder.HasSequence<int>("EventSequence");

            modelBuilder.HasSequence<int>("EventSubDetailSequence");

            modelBuilder.HasSequence<int>("InvestorSequence");

            modelBuilder.HasSequence<int>("MenuSequence");

            modelBuilder.HasSequence<int>("MenuTypeSequence");

            modelBuilder.HasSequence<int>("OperationSequence");

            modelBuilder.HasSequence<int>("ProfileSequence");

            modelBuilder.HasSequence<int>("RestaurantSequence");

            modelBuilder.Entity("Investors.Client.Catalogs.Domain.Entities.CatalogDetails.CatalogDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR CatalogDetailSequence")
                        .HasComment("ID del registro int");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de Catálogo a la que pertenece este detalle");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del detalle catálogo");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4)
                        .HasComment("Observación de detalle catálogo");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(10)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5)
                        .HasComment("Ruta del logo del detalle catálogo");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Valor de detalle catálogo");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("CatalogDetail", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Catalogs.Domain.Entities.Catalogs.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR CatalogSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1)
                        .HasComment("Descripcion o nombre del menú");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.ToTable("Catalog", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Catalogs.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR CategorySequence")
                        .HasComment("ID del registro int");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de Catálogo a la que pertenece esta categoría");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del detalle catálogo");

                    b.Property<int>("NextLevelNights")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Noches requeridas para subir de categoría");

                    b.Property<int>("NextLevelPoints")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("Puntos requeridos para subir de categoría");

                    b.Property<int>("Nights")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("Noches para redimir hospedajes");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(7)
                        .HasComment("Observación de detalle catálogo");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnOrder(3)
                        .HasComment("Puntos para redimir en restaurants");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(12)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(10)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(11)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Investors.Domain.Aggregate.Investor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR InvestorSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Identificacion del cliente");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Apellido del cliente");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1)
                        .HasComment("Nombre del cliente");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.ToTable("Investor", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Operations.Domain.Aggregate.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR OperationSequence")
                        .HasComment("ID del registro int");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Alias de la operacion");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre de la operacion");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Orden de la operacion");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(9)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4)
                        .HasComment("Ruta del logo de la operacion");

                    b.HasKey("Id");

                    b.ToTable("Operation", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Operations.Domain.Entities.MenuTypes.MenuType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR MenuTypeSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del restaurante");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de Restaurante al que pertenece");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Ruta del logo del restaurante");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuType", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Operations.Domain.Entities.Menus.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR MenuSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del menú");

                    b.Property<int>("MenuTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de tipo de menu al que pertenece");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(9)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Título del menú");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4)
                        .HasComment("Ruta del logo del menú");

                    b.HasKey("Id");

                    b.HasIndex("MenuTypeId");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Operations.Domain.Entities.Restaurants.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR RestaurantSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del restaurante");

                    b.Property<int>("OperationId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de Operacion a la que pertenece");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Ruta del logo del restaurante");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("Restaurant", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Profits.Domain.Entities.ProfitDetails.EventSubDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR EventSubDetailSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Descripción de detalle beneficio");

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de evento detalle a la que pertenece este sub detalle");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5)
                        .HasComment("Imagen");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(11)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Título o nombre del detalle beneficio");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(9)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlLogo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4)
                        .HasComment("Ruta del logo del detalle beneficio");

                    b.Property<string>("UrlToOpen")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(6)
                        .HasComment("link de imagen a mostrar");

                    b.HasKey("Id");

                    b.HasIndex("EventDetailId");

                    b.ToTable("EventSubDetail", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Profits.Domain.Entities.Profits.EventDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR EventDetailSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Descripcion o nombre del menú");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de Evento a la que pertenece este detalle");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Titulo del item");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventDetail", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Profits.Domain.Events.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR EventSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del menú");

                    b.Property<int>("ItemType")
                        .HasColumnType("int")
                        .HasColumnOrder(3)
                        .HasComment("Tipo de item a mostrar");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Orden del evento");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Aggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasComment("ID del registro Guid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(2)
                        .HasComment("Nombre a mostrar en aplicacion y reportes");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(1)
                        .HasComment("Identificacion del usuario");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnOrder(3)
                        .HasComment("Tipo de usuario, administrador, inversionista, invitado");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Profiles.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR ProfileSequence")
                        .HasComment("ID del registro int");

                    b.Property<long>("AccumulativeNights")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2)
                        .HasComment("Noches acumuladas");

                    b.Property<long>("CashBackToRedeem")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("Dinero a redimir");

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Categoría del cliente, fourstars, fivestars, sixstars");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(14)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(15)
                        .HasComment("Fecha de creacion");

                    b.Property<long>("HistoryCashBack")
                        .HasColumnType("bigint")
                        .HasColumnOrder(4)
                        .HasComment("Historial de dinero canjeado");

                    b.Property<int>("HistoryNights")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("Historial noches canjeadas");

                    b.Property<long>("NigthsToRedeem")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3)
                        .HasComment("Número de noches a redimir");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(18)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<int>("TotalAccumulatedInvoice")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("Total de facturas acumuladas");

                    b.Property<int>("TotalCashBackClaimed")
                        .HasColumnType("int")
                        .HasColumnOrder(10)
                        .HasComment("Total de dinero reclamado");

                    b.Property<int>("TotalMonthlyCashBackClaimed")
                        .HasColumnType("int")
                        .HasColumnOrder(9)
                        .HasComment("Total mensual de dinero reclamado");

                    b.Property<int>("TotalMonthlyCashBackToRedeem")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Total mensual de dinero a redimir");

                    b.Property<int>("TotalMonthlyNightsClaimed")
                        .HasColumnType("int")
                        .HasColumnOrder(11)
                        .HasComment("Total mensual de noches reclamadas");

                    b.Property<int>("TotalMonthlyNightsToReedem")
                        .HasColumnType("int")
                        .HasColumnOrder(12)
                        .HasComment("Total mensual de noches a redimir");

                    b.Property<int>("TotalNightsClaimed")
                        .HasColumnType("int")
                        .HasColumnOrder(13)
                        .HasComment("Total de noches reclamadas");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(16)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(17)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Catalogs.Domain.Entities.CatalogDetails.CatalogDetail", b =>
                {
                    b.HasOne("Investors.Client.Catalogs.Domain.Entities.Catalogs.Catalog", "Catalog")
                        .WithMany("CatalogDetails")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_CATALOG_WITH_MANY_DETAILS");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("Investors.Client.Catalogs.Domain.Entities.Categories.Category", b =>
                {
                    b.HasOne("Investors.Client.Catalogs.Domain.Entities.Catalogs.Catalog", "Catalog")
                        .WithMany("Categories")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_CATALOG_WITH_MANY_CATEGORIES");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("Investors.Client.Operations.Domain.Entities.MenuTypes.MenuType", b =>
                {
                    b.HasOne("Investors.Client.Operations.Domain.Entities.Restaurants.Restaurant", "Restaurant")
                        .WithMany("MenuTypes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_RESTAURANT_WITH_MANY_MENUTYPES");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Investors.Client.Operations.Domain.Entities.Menus.Menu", b =>
                {
                    b.HasOne("Investors.Client.Operations.Domain.Entities.MenuTypes.MenuType", "MenuType")
                        .WithMany("Menus")
                        .HasForeignKey("MenuTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_TYPEMENU_WITH_MANY_MENUS");

                    b.Navigation("MenuType");
                });

            modelBuilder.Entity("Investors.Client.Operations.Domain.Entities.Restaurants.Restaurant", b =>
                {
                    b.HasOne("Investors.Client.Operations.Domain.Aggregate.Operation", "Operation")
                        .WithMany("Restaurants")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_OPERATION_WITH_MANY_RESTAURANTS");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Investors.Client.Profits.Domain.Entities.ProfitDetails.EventSubDetail", b =>
                {
                    b.HasOne("Investors.Client.Profits.Domain.Entities.Profits.EventDetail", "EventDetail")
                        .WithMany("EventSubDetails")
                        .HasForeignKey("EventDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_EVENT_DETAIL_WITH_MANY_EVENT_SUB_DETAILS");

                    b.Navigation("EventDetail");
                });

            modelBuilder.Entity("Investors.Client.Profits.Domain.Entities.Profits.EventDetail", b =>
                {
                    b.HasOne("Investors.Client.Profits.Domain.Events.Event", "Event")
                        .WithMany("EventDetails")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_EVENT_WITH_MANY_EVENT_DETAILS");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Profiles.Profile", b =>
                {
                    b.HasOne("Investors.Client.Users.Domain.Aggregate.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Investors.Client.Users.Domain.Entities.Profiles.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_USER_WITH_ONE_PROFILE");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Investors.Client.Catalogs.Domain.Entities.Catalogs.Catalog", b =>
                {
                    b.Navigation("CatalogDetails");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Investors.Client.Operations.Domain.Aggregate.Operation", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("Investors.Client.Operations.Domain.Entities.MenuTypes.MenuType", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Investors.Client.Operations.Domain.Entities.Restaurants.Restaurant", b =>
                {
                    b.Navigation("MenuTypes");
                });

            modelBuilder.Entity("Investors.Client.Profits.Domain.Entities.Profits.EventDetail", b =>
                {
                    b.Navigation("EventSubDetails");
                });

            modelBuilder.Entity("Investors.Client.Profits.Domain.Events.Event", b =>
                {
                    b.Navigation("EventDetails");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Aggregate.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
