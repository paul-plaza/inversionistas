// <auto-generated />
using System;
using Investors.Repository.EF.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Investors.Mobile.Api.Infrastructure.Migrations
{
    [DbContext(typeof(InvestorsDbContext))]
    partial class InvestorsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("CashbackDetailSequence");

            modelBuilder.HasSequence<int>("CatalogDetailSequence");

            modelBuilder.HasSequence<int>("CatalogSequence");

            modelBuilder.HasSequence<int>("CategorySequence");

            modelBuilder.HasSequence<int>("EventDetailSequence");

            modelBuilder.HasSequence<int>("EventSequence");

            modelBuilder.HasSequence<int>("EventSubDetailSequence");

            modelBuilder.HasSequence<int>("InvoiceDetailSequence");

            modelBuilder.HasSequence<int>("InvoiceSequence");

            modelBuilder.HasSequence<int>("MenuSequence");

            modelBuilder.HasSequence<int>("MenuTypeSequence");

            modelBuilder.HasSequence<int>("NightsDetailSequence");

            modelBuilder.HasSequence<int>("NotificationSequence");

            modelBuilder.HasSequence<int>("OperationSequence");

            modelBuilder.HasSequence<int>("OptionSequence");

            modelBuilder.HasSequence<int>("ProfileSequence");

            modelBuilder.HasSequence<int>("ReceiptSequence");

            modelBuilder.HasSequence<int>("RestaurantSequence");

            modelBuilder.HasSequence<int>("RoomSequence");

            modelBuilder.HasSequence<int>("UserAdministratorOperationSequence");

            modelBuilder.HasSequence<int>("UserAdministratorOptionSequence");

            modelBuilder.HasSequence<int>("UserAdministratorSequence");

            modelBuilder.Entity("Investors.Administrator.Reports.Domain.ViewMovementsOfCashback", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Investor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Menu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("ViewMovementsOfCashback", (string)null);
                });

            modelBuilder.Entity("Investors.Administrator.Reports.Domain.ViewMovementsOfNight", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Investor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.ToTable((string)null);

                    b.ToView("ViewMovementsOfNights", (string)null);
                });

            modelBuilder.Entity("Investors.Administrator.Users.Domain.Aggregate.UserAdministrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR UserAdministratorSequence")
                        .HasComment("ID del registro Int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(1)
                        .HasComment("Email registrado en portal Azure Directorio Activo");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_UNIQUE_EMAIL");

                    b.ToTable("UserAdministrator", (string)null);
                });

            modelBuilder.Entity("Investors.Administrator.Users.Domain.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR OptionSequence")
                        .HasComment("ID del registro Int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion de opcion menu");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(4)
                        .HasComment("Icono de opcion menu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1)
                        .HasComment("Nombre de opcion menu");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("Orden de opcion menu");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("Ruta de opcion menu");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(10)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.ToTable("Option", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = new Guid("850f91cd-a853-45be-b677-0864ca160e0e"),
                            CreatedOn = new DateTime(2023, 11, 28, 14, 52, 49, 865, DateTimeKind.Utc).AddTicks(7140),
                            Description = "Dashboard",
                            Icon = "dashboard",
                            Name = "Dashboard",
                            Order = 1,
                            Route = "/dashboard",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = new Guid("850f91cd-a853-45be-b677-0864ca160e0e"),
                            CreatedOn = new DateTime(2023, 11, 28, 14, 52, 49, 865, DateTimeKind.Utc).AddTicks(7150),
                            Description = "Escanear Facturas",
                            Icon = "qr_code_scanner",
                            Name = "Registro Facturas",
                            Order = 2,
                            Route = "/qr",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = new Guid("850f91cd-a853-45be-b677-0864ca160e0e"),
                            CreatedOn = new DateTime(2023, 11, 28, 14, 52, 49, 865, DateTimeKind.Utc).AddTicks(7160),
                            Description = "Escanear Facturas",
                            Icon = "domain",
                            Name = "Operaciones",
                            Order = 3,
                            Route = "/operations",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = new Guid("850f91cd-a853-45be-b677-0864ca160e0e"),
                            CreatedOn = new DateTime(2023, 11, 28, 14, 52, 49, 865, DateTimeKind.Utc).AddTicks(7160),
                            Description = "Publicaciones",
                            Icon = "feed",
                            Name = "Publicaciones",
                            Order = 4,
                            Route = "/news",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = new Guid("850f91cd-a853-45be-b677-0864ca160e0e"),
                            CreatedOn = new DateTime(2023, 11, 28, 14, 52, 49, 865, DateTimeKind.Utc).AddTicks(7160),
                            Description = "Inversionistas",
                            Icon = "supervisor_account",
                            Name = "Inversionistas",
                            Order = 5,
                            Route = "/investors",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = new Guid("850f91cd-a853-45be-b677-0864ca160e0e"),
                            CreatedOn = new DateTime(2023, 11, 28, 14, 52, 49, 865, DateTimeKind.Utc).AddTicks(7170),
                            Description = "Canjes",
                            Icon = "supervisor_account",
                            Name = "Canjes",
                            Order = 6,
                            Route = "/cashback",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = new Guid("850f91cd-a853-45be-b677-0864ca160e0e"),
                            CreatedOn = new DateTime(2023, 11, 28, 14, 52, 49, 865, DateTimeKind.Utc).AddTicks(7170),
                            Description = "Habitaciones",
                            Icon = "bedtime",
                            Name = "Habitaciones",
                            Order = 7,
                            Route = "/rooms",
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = new Guid("850f91cd-a853-45be-b677-0864ca160e0e"),
                            CreatedOn = new DateTime(2023, 11, 28, 14, 52, 49, 865, DateTimeKind.Utc).AddTicks(7170),
                            Description = "Configuracion de la aplicación",
                            Icon = "settings",
                            Name = "Configuración",
                            Order = 8,
                            Route = "/settings",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Investors.Administrator.Users.Domain.Entities.UserAdministratorOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR UserAdministratorOperationSequence")
                        .HasComment("ID del registro Int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creacion");

                    b.Property<int>("OperationId")
                        .HasColumnType("int")
                        .HasColumnOrder(2)
                        .HasComment("Id de la opcion de menu");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<int>("UserAdministratorId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id del usuario administrador");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("UserAdministratorId", "OperationId")
                        .IsUnique();

                    b.ToTable("UserAdministratorOperation", (string)null);
                });

            modelBuilder.Entity("Investors.Administrator.Users.Domain.Entities.UserAdministratorOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR UserAdministratorOptionSequence")
                        .HasComment("ID del registro Int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creacion");

                    b.Property<int>("OptionId")
                        .HasColumnType("int")
                        .HasColumnOrder(2)
                        .HasComment("Id de la opcion de menu");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<int>("UserAdministratorId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id del usuario administrador");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("UserAdministratorId", "OptionId")
                        .IsUnique();

                    b.ToTable("UserAdministratorOption", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Aggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasComment("ID del registro Guid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(2)
                        .HasComment("Nombre a mostrar en aplicacion y reportes");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(7)
                        .HasComment("Email registrado en Azure B2C");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(6)
                        .HasComment("Identificacion del usuario");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3)
                        .HasComment("Nombre a mostrar en aplicacion y reportes");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(12)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(4)
                        .HasComment("Nombre a mostrar en aplicacion y reportes");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(10)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(11)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("Tipo de usuario, administrador, inversionista, invitado");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Identification", "Status" }, "IDX_UNIQUE_VALUES_IDENTIFICATION")
                        .IsUnique()
                        .HasFilter("Status = 1");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Invoices.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR InvoiceSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(11)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(12)
                        .HasComment("Fecha de creacion");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3)
                        .HasComment("Fecha de la factura");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4)
                        .HasComment("Identificacion registrada en la factura");

                    b.Property<string>("IdentificationInvestor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5)
                        .HasComment("Identificacion del Inversionista");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Tipo de factura (Cashback,Alojamiento,Mixto)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Numero de la factura");

                    b.Property<int>("OperationId")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("Id de la operación donde se realizo el consumo");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id del recibo");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(15)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<double>("TotalInvoice")
                        .HasColumnType("float")
                        .HasColumnOrder(6)
                        .HasComment("Total de factua, es la suma de cada item del detalle");

                    b.Property<long?>("TotalNights")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("Total de noches generados en la factura");

                    b.Property<long?>("TotalPoints")
                        .HasColumnType("bigint")
                        .HasColumnOrder(9)
                        .HasComment("Total de puntos generados en la factura");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(13)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(14)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Invoices.InvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR InvoiceDetailSequence")
                        .HasComment("ID del registro int");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de entrada");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de salida");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(9)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Grupo de consumo");

                    b.Property<string>("GroupDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Descripción del grupo");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de la factura");

                    b.Property<int?>("Nights")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("Noches acumuladas en el registro");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(13)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<double>("TotalValue")
                        .HasColumnType("float")
                        .HasColumnOrder(4)
                        .HasComment("Valor total del item");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Tipo de registro (Cashback, Alojamiento, Mixto)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(11)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(12)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDetail", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Invoices.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR ReceiptSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de creacion");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnOrder(2)
                        .HasComment("Fecha de la factura");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Identificacion de referido");

                    b.Property<bool>("IsSync")
                        .HasColumnType("bit")
                        .HasColumnOrder(4)
                        .HasComment("Es sincronizada");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(9)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("Id del usuario que registra el recibo");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Receipt", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR NotificationSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(4)
                        .HasComment("Descripción de la notificación");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("Tipo de notificación");

                    b.Property<int?>("OperationId")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Id de la operación");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(11)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnOrder(3)
                        .HasComment("Subtítulo de la notificación");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnOrder(2)
                        .HasComment("Título de la notificación");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(9)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("Id del usuario");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Profiles.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR ProfileSequence")
                        .HasComment("ID del registro int");

                    b.Property<long>("AccumulativeNights")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2)
                        .HasComment("Noches acumuladas");

                    b.Property<long>("CashBackToRedeem")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("Dinero a redimir");

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Categoría del cliente, fourstars, fivestars, sixstars");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(17)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(18)
                        .HasComment("Fecha de creacion");

                    b.Property<DateTime?>("FirstInvoiceRegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(14)
                        .HasComment("Fecha de la primera factura registrada");

                    b.Property<long>("HistoryCashBack")
                        .HasColumnType("bigint")
                        .HasColumnOrder(4)
                        .HasComment("Historial de dinero canjeado");

                    b.Property<int>("HistoryNights")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("Historial noches canjeadas");

                    b.Property<long>("NightsToRedeem")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3)
                        .HasComment("Número de noches a redimir");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(21)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<int>("TotalAccumulatedInvoice")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("Total de facturas acumuladas");

                    b.Property<int>("TotalCashBackClaimed")
                        .HasColumnType("int")
                        .HasColumnOrder(10)
                        .HasComment("Total de dinero reclamado");

                    b.Property<int>("TotalMoneyAccumulated")
                        .HasColumnType("int")
                        .HasColumnOrder(15)
                        .HasComment("Cantidad en dinero acumulado para subir la categoria");

                    b.Property<int>("TotalMonthlyCashBackClaimed")
                        .HasColumnType("int")
                        .HasColumnOrder(9)
                        .HasComment("Total mensual de dinero reclamado");

                    b.Property<int>("TotalMonthlyCashBackToRedeem")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Total mensual de dinero a redimir");

                    b.Property<int>("TotalMonthlyNightsClaimed")
                        .HasColumnType("int")
                        .HasColumnOrder(11)
                        .HasComment("Total mensual de noches reclamadas");

                    b.Property<int>("TotalMonthlyNightsToRedeem")
                        .HasColumnType("int")
                        .HasColumnOrder(12)
                        .HasComment("Total mensual de noches a redimir");

                    b.Property<int>("TotalNightsAccumulated")
                        .HasColumnType("int")
                        .HasColumnOrder(16)
                        .HasComment("Cantidad de noches que ha acumulado en sus facturas sin realizar ningun proceso extra");

                    b.Property<int>("TotalNightsClaimed")
                        .HasColumnType("int")
                        .HasColumnOrder(13)
                        .HasComment("Total de noches reclamadas");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(19)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(20)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Transactions.CashbackDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR CashbackDetailSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creacion");

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de menú");

                    b.Property<Guid>("MovementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnOrder(2)
                        .HasComment("Puntos que costó el movimiento");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.HasIndex("MovementId");

                    b.ToTable("CashbackDetail", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Transactions.Movement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasComment("ID del registro Guid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9)
                        .HasComment("Fecha de creacion");

                    b.Property<int>("OperationId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de operación");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnOrder(2)
                        .HasComment("Id del restaurante cuando el movimiento es tipo cashback");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnOrder(3)
                        .HasComment("Id de la habitación cuando el movimiento es tipo noches");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(12)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<int?>("TotalItems")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("Total de articulos en el pedido");

                    b.Property<int>("TotalToRedeem")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Total del valor acumulado en noches o puntos");

                    b.Property<int>("TransactionState")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("Estado de transacción o movimiento");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("Tipo de transacción");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(10)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(11)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Movement", (string)null);
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Transactions.NightsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR NightsDetailSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de creacion");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("date")
                        .HasColumnOrder(4)
                        .HasComment("Fecha salida");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("date")
                        .HasColumnOrder(3)
                        .HasComment("Fecha ingreso");

                    b.Property<Guid>("MovementId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("Id de movimiento");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Observación");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(9)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.HasIndex("MovementId")
                        .IsUnique();

                    b.ToTable("NightsDetail", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Catalogs.Domain.Aggregate.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR CatalogSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1)
                        .HasComment("Descripcion o nombre del menú");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.ToTable("Catalog", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Catalogs.Domain.Entities.CatalogDetails.CatalogDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR CatalogDetailSequence")
                        .HasComment("ID del registro int");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de Catálogo a la que pertenece este detalle");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del detalle catálogo");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4)
                        .HasComment("Observación de detalle catálogo");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(9)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Valor de detalle catálogo");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("CatalogDetail", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Catalogs.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR CategorySequence")
                        .HasComment("ID del registro int");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de Catálogo a la que pertenece esta categoría");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(10)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(11)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del detalle catálogo");

                    b.Property<int>("NextLevelNights")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Noches requeridas para subir de categoría");

                    b.Property<int>("NextLevelPoints")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("Puntos requeridos para subir de categoría");

                    b.Property<int>("Nights")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("Noches para redimir hospedajes");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(7)
                        .HasComment("Observación de categoría");

                    b.Property<int>("Percent")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Porcentaje para alcanzar siguiente categoría");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnOrder(3)
                        .HasComment("Puntos para redimir en restaurants");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(14)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(12)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(13)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(9)
                        .HasComment("Imagen de beneficios por categoria");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Events.Domain.Aggregate.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR EventSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del menú");

                    b.Property<int>("ItemType")
                        .HasColumnType("int")
                        .HasColumnOrder(3)
                        .HasComment("Tipo de item a mostrar");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Orden del evento");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Events.Domain.Entities.EventDetails.EventDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR EventDetailSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Descripcion o nombre del menú");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de Evento a la que pertenece este detalle");

                    b.Property<int>("OperationId")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("operación a la que pertenece el evento");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(11)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Titulo del item");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(9)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(10)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlLogo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4)
                        .HasComment("Ruta del logo del detalle beneficio");

                    b.Property<string>("UrlToOpen")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5)
                        .HasComment("link de imagen a mostrar");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventDetail", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Events.Domain.Entities.EventSubDetails.EventSubDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR EventSubDetailSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Descripción de detalle beneficio");

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de evento detalle a la que pertenece este sub detalle");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4)
                        .HasComment("Imagen");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(9)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Título o nombre del detalle beneficio");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.HasIndex("EventDetailId");

                    b.ToTable("EventSubDetail", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Investors.Domain.Aggregate.Investor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasComment("Id del registro");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("FullNames")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(1)
                        .HasComment("Nombre del cliente");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(2)
                        .HasComment("Identificacion del cliente");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.ToTable("Investor", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Investors.Domain.Entities.InvestorOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0)
                        .HasComment("Id del registro");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creacion");

                    b.Property<Guid>("InvestorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2)
                        .HasComment("Identificacion del cliente");

                    b.Property<int>("OperationId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Identificacion del cliente");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<int>("TotalActions")
                        .HasColumnType("int")
                        .HasColumnOrder(3)
                        .HasComment("Total de acciones en operacion");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.HasIndex("InvestorId");

                    b.HasIndex("OperationId");

                    b.ToTable("InvestorOperation", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Aggregate.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR OperationSequence")
                        .HasComment("ID del registro int");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Alias de la operacion");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre de la operacion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(7)
                        .HasComment("Correo del encargado de la operación");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Orden de la operacion");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(6)
                        .HasComment("Contraseña de usuario de la operación para factura");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(12)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(10)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(11)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4)
                        .HasComment("Ruta del logo de la operacion");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5)
                        .HasComment("Nombre de usuario de la operación para factura");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("Operation", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Entities.MenuTypes.MenuType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR MenuTypeSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del restaurante");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de Restaurante al que pertenece");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Ruta del logo del restaurante");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuType", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Entities.Menus.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR MenuSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del menú");

                    b.Property<int>("MenuTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de tipo de menu al que pertenece");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("Valor en puntos del articulo");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(9)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Título del menú");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.HasKey("Id");

                    b.HasIndex("MenuTypeId");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Entities.Restaurants.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR RestaurantSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("Descripcion o nombre del restaurante");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4)
                        .HasComment("Correo del encargado del restaurante");

                    b.Property<int>("OperationId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de Operacion a la que pertenece");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(9)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3)
                        .HasComment("Ruta del logo del restaurante");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("Restaurant", (string)null);
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Entities.Rooms.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR RoomSequence")
                        .HasComment("ID del registro int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasComment("Usuario creador");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9)
                        .HasComment("Fecha de creacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(2)
                        .HasComment("Descripción de habitación");

                    b.Property<int>("Guests")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Número máximo de huéspedes por habitación");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(5)
                        .HasComment("Observación de la habitación");

                    b.Property<int>("OperationId")
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Id de Operacion a la que pertenece");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("Tipo de habitación");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(12)
                        .HasComment("Estado del registro Activo(1), Inactivo(2), Eliminado(3)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(3)
                        .HasComment("Título de habitación");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(10)
                        .HasComment("Usuario que modifica el registro");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(11)
                        .HasComment("Fecha de ultima actualizacion del registro");

                    b.Property<string>("UrlLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4)
                        .HasComment("Ruta del logo de habitación");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("Investors.Administrator.Users.Domain.Entities.UserAdministratorOperation", b =>
                {
                    b.HasOne("Investors.Kernel.Shared.Operations.Domain.Aggregate.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Investors.Administrator.Users.Domain.Aggregate.UserAdministrator", "UserAdministrator")
                        .WithMany("Operations")
                        .HasForeignKey("UserAdministratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_USER_ADMINISTRATOR_WITH_MANY_OPERATIONS");

                    b.Navigation("Operation");

                    b.Navigation("UserAdministrator");
                });

            modelBuilder.Entity("Investors.Administrator.Users.Domain.Entities.UserAdministratorOption", b =>
                {
                    b.HasOne("Investors.Administrator.Users.Domain.Entities.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Investors.Administrator.Users.Domain.Aggregate.UserAdministrator", "UserAdministrator")
                        .WithMany("Options")
                        .HasForeignKey("UserAdministratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_USER_ADMINISTRATOR_WITH_MANY_MENUS");

                    b.Navigation("Option");

                    b.Navigation("UserAdministrator");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Invoices.Invoice", b =>
                {
                    b.HasOne("Investors.Client.Users.Domain.Entities.Invoices.Receipt", "Receipt")
                        .WithMany("Invoices")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_RECEIPT_WITH_MANY_INVOICES");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Invoices.InvoiceDetail", b =>
                {
                    b.HasOne("Investors.Client.Users.Domain.Entities.Invoices.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_INVOICE_WITH_MANY_INVOICE_DETAILS");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Invoices.Receipt", b =>
                {
                    b.HasOne("Investors.Client.Users.Domain.Aggregate.User", "User")
                        .WithMany("Receipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_USER_WITH_MANY_RECEIPTS");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("Investors.Client.Users.Domain.Aggregate.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_USER_WITH_MANY_NOTIFICATIONS");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Profiles.Profile", b =>
                {
                    b.HasOne("Investors.Client.Users.Domain.Aggregate.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Investors.Client.Users.Domain.Entities.Profiles.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_USER_WITH_ONE_PROFILE");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Transactions.CashbackDetail", b =>
                {
                    b.HasOne("Investors.Client.Users.Domain.Entities.Transactions.Movement", "Movement")
                        .WithMany("CashbackDetails")
                        .HasForeignKey("MovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_MOVEMENT_WITH_MANY_CASHBACK_DETAILS");

                    b.Navigation("Movement");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Transactions.Movement", b =>
                {
                    b.HasOne("Investors.Kernel.Shared.Operations.Domain.Entities.Rooms.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("Investors.Client.Users.Domain.Aggregate.User", "User")
                        .WithMany("Movements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_USER_WITH_MANY_MOVEMENTS");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Transactions.NightsDetail", b =>
                {
                    b.HasOne("Investors.Client.Users.Domain.Entities.Transactions.Movement", "Movement")
                        .WithOne("NightsDetail")
                        .HasForeignKey("Investors.Client.Users.Domain.Entities.Transactions.NightsDetail", "MovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_MOVEMENT_WITH_ONE_NIGHTS_DETAILS");

                    b.Navigation("Movement");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Catalogs.Domain.Entities.CatalogDetails.CatalogDetail", b =>
                {
                    b.HasOne("Investors.Kernel.Shared.Catalogs.Domain.Aggregate.Catalog", "Catalog")
                        .WithMany("CatalogDetails")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_CATALOG_WITH_MANY_DETAILS");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Catalogs.Domain.Entities.Categories.Category", b =>
                {
                    b.HasOne("Investors.Kernel.Shared.Catalogs.Domain.Aggregate.Catalog", "Catalog")
                        .WithMany("Categories")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_CATALOG_WITH_MANY_CATEGORIES");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Events.Domain.Entities.EventDetails.EventDetail", b =>
                {
                    b.HasOne("Investors.Kernel.Shared.Events.Domain.Aggregate.Event", "Event")
                        .WithMany("EventDetails")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_EVENT_WITH_MANY_EVENT_DETAILS");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Events.Domain.Entities.EventSubDetails.EventSubDetail", b =>
                {
                    b.HasOne("Investors.Kernel.Shared.Events.Domain.Entities.EventDetails.EventDetail", "EventDetail")
                        .WithMany("EventSubDetails")
                        .HasForeignKey("EventDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_EVENT_DETAIL_WITH_MANY_EVENT_SUB_DETAILS");

                    b.Navigation("EventDetail");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Investors.Domain.Entities.InvestorOperation", b =>
                {
                    b.HasOne("Investors.Kernel.Shared.Investors.Domain.Aggregate.Investor", "Investor")
                        .WithMany("InvestorOperations")
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_INVESTOR_WITH_MANY_OPERATION");

                    b.HasOne("Investors.Kernel.Shared.Operations.Domain.Aggregate.Operation", "Operation")
                        .WithMany("InvestorOperations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_OPERATION_WITH_MANY_INVESTOR");

                    b.Navigation("Investor");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Entities.MenuTypes.MenuType", b =>
                {
                    b.HasOne("Investors.Kernel.Shared.Operations.Domain.Entities.Restaurants.Restaurant", "Restaurant")
                        .WithMany("MenuTypes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_RESTAURANT_WITH_MANY_MENUTYPES");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Entities.Menus.Menu", b =>
                {
                    b.HasOne("Investors.Kernel.Shared.Operations.Domain.Entities.MenuTypes.MenuType", "MenuType")
                        .WithMany("Menus")
                        .HasForeignKey("MenuTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_TYPEMENU_WITH_MANY_MENUS");

                    b.Navigation("MenuType");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Entities.Restaurants.Restaurant", b =>
                {
                    b.HasOne("Investors.Kernel.Shared.Operations.Domain.Aggregate.Operation", "Operation")
                        .WithMany("Restaurants")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_OPERATION_WITH_MANY_RESTAURANTS");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Entities.Rooms.Room", b =>
                {
                    b.HasOne("Investors.Kernel.Shared.Operations.Domain.Aggregate.Operation", "Operation")
                        .WithMany("Rooms")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ONE_OPERATION_WITH_MANY_ROOMS");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Investors.Administrator.Users.Domain.Aggregate.UserAdministrator", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Aggregate.User", b =>
                {
                    b.Navigation("Movements");

                    b.Navigation("Notifications");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Invoices.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Invoices.Receipt", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Investors.Client.Users.Domain.Entities.Transactions.Movement", b =>
                {
                    b.Navigation("CashbackDetails");

                    b.Navigation("NightsDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Catalogs.Domain.Aggregate.Catalog", b =>
                {
                    b.Navigation("CatalogDetails");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Events.Domain.Aggregate.Event", b =>
                {
                    b.Navigation("EventDetails");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Events.Domain.Entities.EventDetails.EventDetail", b =>
                {
                    b.Navigation("EventSubDetails");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Investors.Domain.Aggregate.Investor", b =>
                {
                    b.Navigation("InvestorOperations");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Aggregate.Operation", b =>
                {
                    b.Navigation("InvestorOperations");

                    b.Navigation("Restaurants");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Entities.MenuTypes.MenuType", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Investors.Kernel.Shared.Operations.Domain.Entities.Restaurants.Restaurant", b =>
                {
                    b.Navigation("MenuTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
